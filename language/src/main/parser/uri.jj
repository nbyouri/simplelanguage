/* Parser for the uri language */

options {
    STATIC = false;
    TOKEN_EXTENDS="UToken";
    COMMON_TOKEN_ACTION=true;
}

PARSER_BEGIN(Parser)

package parser;

import java.util.ArrayList;
import java.util.Map;
import java.util.List;

import com.oracle.truffle.api.source.Source;
import uri.SLLanguage;
import nodes.SLExpressionNode;
import nodes.SLRootNode;
import nodes.SLStatementNode;

public class Parser {
    SLNodeFactory factory = null;

    public Map<String, SLRootNode> parseUri(Source source) throws Exception {
        return parseUri(null, source);
    }

    public Map<String, SLRootNode> parseUri(SLLanguage language, Source source) throws Exception {
        this.factory = new SLNodeFactory(language, source);
        this.Uri();
        if (this.errors.size() > 0) {
            StringBuilder msg = new StringBuilder("Error(s) parsing script:\n");
            for (ErrorDescription error : this.errors) {
                msg.append(error.message).append("\n");
            }
            final ErrorDescription desc = errors.get(0);
            throw new SLParseError(
                source,
                desc.line,
                desc.column,
                desc.length,
                msg.toString());
        }
        return this.factory.getAllFunctions();
    }

    final class ErrorDescription {
        final int line;
        final int column;
        final int length;
        final String message;

        ErrorDescription(final int line, final int column, final int length, final String message) {
            this.line = line;
            this.column = column;
            this.length = length;
            this.message = message;
        }
    }

    protected final List<ErrorDescription> errors = new ArrayList<ErrorDescription>();

    public String errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text

    protected void printMsg(int line, int column, int length, String msg) {
        StringBuffer b = new StringBuffer(errMsgFormat);
        int pos = b.indexOf("{0}");
        if (pos >= 0) {
            b.delete(pos, pos + 3);
            b.insert(pos, line);
        }
        pos = b.indexOf("{1}");
        if (pos >= 0) {
            b.delete(pos, pos + 3);
            b.insert(pos, column);
        }
        pos = b.indexOf("{2}");
        if (pos >= 0)
            b.replace(pos, pos + 3, msg);
        errors.add(new ErrorDescription(line, column, length, b.toString()));
    }

        private void SynErr( ParseException e ) {
//            token = getNextToken();
            // Get the possible expected tokens
            StringBuffer expected = new StringBuffer();
            for ( int i = 0; i < e.expectedTokenSequences.length; i++ ) {
                for ( int j = 0; j < e.expectedTokenSequences[ i ].length;
                    j++ ) {
                    expected.append( "\n" );
                    expected.append( "    " );
                    expected.append( tokenImage[
                        e.expectedTokenSequences[ i ][ j ] ] );
                    expected.append( "..." );
                }
            }

            // Print error message
            if ( e.expectedTokenSequences.length == 1 ) {
                this.SemErr(String.format( "%s found where %s sought",
                    getToken( 1 ), expected ));
            }
            else {
                this.SemErr(String.format( "%s found where one of %s sought",
                    getToken( 1 ), expected ));
            }
        }

    void SynErr(String msg) {
//        token = getNextToken();
        this.SemErr(msg);
    }

    void FatalError(String msg) {
        errors.add(new ErrorDescription(0, 0, 0, msg));
    }

    void SemErr(String msg) {
        this.SemErr(token.beginLine, token.beginColumn, token.val.length(), msg);
    }

    void SemErr(int line, int col, int length, String s) {
        printMsg(line, col, length, s);
    }

    void Warning(int line, int col, int length, String s) {
        printMsg(line, col, length, s);
    }
}

PARSER_END(Parser)

TOKEN_MGR_DECLS:
{
    void CommonTokenAction(Token t)
    {
        UToken token = (UToken) t;
        token.charPos = input_stream.tokenBegin;
        token.val = t.image;
    }
}

/////////////////////////////////////////////////////////
//         The uri lexical grammar starts here         //
/////////////////////////////////////////////////////////


// Whitespace -- ignored
SKIP: {" "|"\t"|"\n"|"\r"|"\f"}

// Single or multi-line comment -- ignored
SKIP: {
      <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

// Reserved words
TOKEN:
{
  < CLASS: "class" >
| < EXTENDS: "extends" >
| < FUNCTION: "def" >
| < RETURN: "return" >
| < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < DEBUGGER: "debugger" >
| < BREAK: "break" >
| < CONTINUE: "continue" >
}

// Operators (these could be combined with the reserved words)
TOKEN:
{
  < ASSIGN: "=" >
| < EQUAL: "==" >
| < NOT_EQUAL: "!=" >
| < GT: ">" >
| < GE: ">=" >
| < LT: "<" >
| < LE: "<=" >
| < STAR: "*" >
| < DIV: "/" >
| < PLUS: "+" >
| < MINUS: "-" >
| < LOR: "||" >
| < LAND: "&&" >
}


// Separators (these could be combined with the reserved words)
TOKEN:
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LCURLY: "{" >
| < RCURLY: "}" >
| < LBRACK: "[" >
| < RBRACK: "]" >
| < SEMI: ";" >
| < COMMA: "," >
| < DOT: "." >
}



// Identifiers
TOKEN:
{
  < IDENTIFIER: (<LETTER>|"_"|"$") (<LETTER>|<DIGIT>|"_"|"$")* >
| < #LETTER: ["a"-"z","A"-"Z"] >
| < #DIGIT: ["0"-"9"] >
| < #NON_ZERO_DIGIT: ["1"-"9"] >
}


// Literals
TOKEN:
{
  < NUMERIC_LITERAL: ("0" | <NON_ZERO_DIGIT> (<DIGIT>)*) >
| < STRING_LITERAL: "\"" (<ESC> | ~["\"","\\","\n","\r"])* "\"" >
| < #ESC: "\\" ["n","t","b","r","f","\\","'","\""] >
}

// For anything else, we return an ERROR token. Without this
// definition the TokenManager will throw an Error when a lexical
// error occurs, making it impossible to recover from it. So we
// define this ERROR token.
TOKEN:
{
 < ERROR: ~[] >
}

/////////////////////////////////////////////////////////
//       The uri syntactic grammar starts here         //
/////////////////////////////////////////////////////////


// Parse a compilation unit
//       Uri ::= {Function | Class}
void Uri(): {
    boolean onedef = false;
}
{
    (
        Function() { onedef = true; }
    |
        Class()
    )*
    { if (!onedef) { throw new ParseException("No functions"); } }
}

// Parse a class
//      Class ::= CLASS IDENTIFIER [EXTENDS IDENTIFIER] LCURLY {MemberDecl} {Function} RCURLY
void Class(): {
    SLExpressionNode member = null;
}
{
    try {
        <CLASS>
        <IDENTIFIER>
        [
            <EXTENDS>
            <IDENTIFIER>
        ]
        <LCURLY>
        (
                member = MemberDecl()
        )*
        (
            Function()
        )*
        <RCURLY>
    } catch (Exception e) {
        throw new ParseException("Failed to parse class");
    }
//    { factory.finishClass(); }
}

// Parse a MemberDecl
//      MemberDecl ::= IDENTIFIER ["=" Expression] ";"
SLExpressionNode MemberDecl(): {
    SLExpressionNode expr = null;
}
{
    <IDENTIFIER>
    [
        <ASSIGN>
        expr = Expression()
    ]
    <SEMI>
    { return expr; }
}

// Parse a function
//      Function ::= FUNCTION IDENTIFIER LPAREN [IDENTIFIER {COMMA IDENTIFIER}] RPAREN Block
void Function(): {}
{
    try {
            <FUNCTION>
            <IDENTIFIER>    { Token identifierToken = token; }
            <LPAREN>        { int bodyStartPos = token.charPos; }
                            { factory.startFunction(identifierToken, bodyStartPos); }
            [
                <IDENTIFIER> { factory.addFormalParameter(token); }
                (
                    <COMMA>
                    <IDENTIFIER> { factory.addFormalParameter(token); }
                )*
            ]
            <RPAREN>
    } catch (ParseException e) {
        throw new ParseException("Failed to parse function");
    }
    { factory.finishFunction(Block(false)); }
}


// Parse a block
//      Block ::= LCURLY {Statement} RCURLY
SLStatementNode Block(boolean inLoop): {
    SLStatementNode node = null;
    List<SLStatementNode> body = new ArrayList<SLStatementNode>();
    factory.startBlock();
    int start = 0;
}
{
    try {
        <LCURLY> { start = token.charPos; }
        (
            node = Statement(inLoop)
            { body.add(node); }
        )*
        <RCURLY>
    } catch (ParseException e) {
        SynErr(e);
    }
    { int length = (token.charPos + token.val.length()) - start; }
    { return factory.finishBlock(body, start, length); }
}

// Parse a statement
//     Statement ::= WHILE LPAREN Expression RPAREN Block
//                 | BREAK SEMI
//                 | CONTINUE SEMI
//                 | IF LPAREN Expression RPAREN Block [ELSE Block]
//                 | RETURN [Expression] SEMI
//                 | Expression SEMI
//                 | DEBUGGER SEMI
SLStatementNode Statement(boolean inLoop): {
    SLStatementNode result = null;
    SLExpressionNode expr = null;
    SLStatementNode body = null;
    SLStatementNode elsePart = null;
}
{
    try {
        <WHILE> { Token whileToken = token; }
        <LPAREN> expr = Expression() <RPAREN>
        body = Block(true)
        { result = factory.createWhile(whileToken, expr, body); }

        | <BREAK> { if (inLoop) {
                        result = factory.createBreak(token);
                    } else {
                        SemErr("break used outside of loop");
                    }
                  }
          <SEMI>

        | <CONTINUE> { if (inLoop) {
                           result = factory.createContinue(token);
                       } else {
                           SemErr("continue used outside of loop");
                       }
                     }
          <SEMI>

        | <IF> { Token ifToken = token; }
          <LPAREN> expr = Expression() <RPAREN>
          body = Block(inLoop)
          [ LOOKAHEAD( <ELSE> )
            <ELSE>
            elsePart = Block(inLoop)
          ]
          { result = factory.createIf(ifToken, expr, body, elsePart); }

        | <RETURN> { Token returnToken = token; }
          [
            expr = Expression()
          ]
          { result = factory.createReturn(returnToken, expr); }
          <SEMI>

        | result = Expression()
          <SEMI>

        | <DEBUGGER>
          { result = factory.createDebugger(token); }
          <SEMI>
    } catch (ParseException e) {
        SynErr("invalid Statement");
    }
    { return result; }
}

// Parse an expression
//     Expression ::= LogicTerm {LOR LogicTerm}
SLExpressionNode Expression(): {
   SLExpressionNode result = null;
   SLExpressionNode right = null;
}
{
    try {
        result = LogicTerm()
        (
            <LOR>   { Token op = token; }
            right = LogicTerm()
            { result = factory.createBinary(op, result, right); }
        )*
    } catch ( ParseException e ) {
        SynErr(e);
    }
    { return result; }
}

// Parse a logicTerm
//     LogicTerm ::= LogicFactor {LAND LogicFactor}
SLExpressionNode LogicTerm(): {
   SLExpressionNode result = null;
   SLExpressionNode right = null;
}
{
    try {
        result = LogicFactor()
        (
            <LAND>   { Token op = token; }
            right = LogicFactor()
            { result = factory.createBinary(op, result, right); }
        )*
    } catch ( ParseException e ) {
        SynErr(e);
    }
    { return result; }
}

// Parse a logicFactor
//     LogicFactor ::= Arithmetic [(LT|LE|GT|GE|EQUAL|NOT_EQUAL) Arithmetic]
SLExpressionNode LogicFactor(): {
   SLExpressionNode result = null;
   SLExpressionNode right = null;
}
{
    try {
        result = Arithmetic()
        [
            (<LT> | <LE> | <GT> | <GE> | <EQUAL> | <NOT_EQUAL>)  { Token op = token; }
            right = Arithmetic()
            { result = factory.createBinary(op, result, right); }
        ]
    } catch ( ParseException e ) {
        SynErr(e);
    }
    { return result; }
}

// Parse an arithmetic
//     Arithmetic ::= Term {(PLUS|MINUS) Term}
SLExpressionNode Arithmetic(): {
   SLExpressionNode result = null;
   SLExpressionNode right = null;
}
{
    try {
        result = Term()
        (
            (<PLUS> | <MINUS>)   { Token op = token; }
            right = Term()
            { result = factory.createBinary(op, result, right); }
        )*
    } catch ( ParseException e ) {
        SynErr(e);
    }
    { return result; }
}

// Parse a term
//     Term ::= Factor {(STAR|DIV) Factor}
SLExpressionNode Term(): {
   SLExpressionNode result = null;
   SLExpressionNode right = null;
}
{
    try {
        result = Factor()
        (
            (<STAR> | <DIV>)   { Token op = token; }
            right = Factor()
            { result = factory.createBinary(op, result, right); }
        )*
    } catch ( ParseException e ) {
        SynErr(e);
    }
    { return result; }
}

// Parse a factor
//     Factor ::= IDENTIFIER (MemberExpression)?
//              | STRING_LITERAL
//              | NUMERIC_LITERAL
//              | LPAREN Expression RPAREN
SLExpressionNode Factor(): {
    SLExpressionNode result = null;
}
{
    try {
            <IDENTIFIER> { SLExpressionNode assignmentName = factory.createStringLiteral(token, false); }
            (
                result = MemberExpression(null, null, assignmentName)
                | { result = factory.createRead(assignmentName); }
            )
        | <STRING_LITERAL> { result = factory.createStringLiteral(token, true); }

        | <NUMERIC_LITERAL> { result = factory.createNumericLiteral(token); }

        | <LPAREN> { int start = token.charPos; }
          result = Expression() { SLExpressionNode expr = result; }
          <RPAREN> { int length = (token.charPos + token.val.length()) - start; }
          { result = factory.createParenExpression(expr, start, length); }
    } catch ( ParseException e ) {
        SynErr("invalid Factor");
    }
    { return result; }
}

// Parse a memberExpression
//     MemberExpression ::= (
//                            LPAREN [Expression {COMMA Expression}] RPAREN
//                          | ASSIGN Expression
//                          | DOT IDENTIFIER
//                          | LBRACK Expression RBRACK
//                          )
//                          [MemberExpression]
SLExpressionNode MemberExpression(SLExpressionNode r,
                                    SLExpressionNode assignmentReceiver,
                                    SLExpressionNode assignmentName): {
    SLExpressionNode result = null;
    SLExpressionNode receiver = r;
    SLExpressionNode nestedAssignmentName = null;
    List<SLExpressionNode> parameters = null;
    SLExpressionNode parameter = null;
}
{
    try {
        (
            <LPAREN> { parameters = new ArrayList<SLExpressionNode>();
                        if (receiver == null) {
                            receiver = factory.createRead(assignmentName);
                        }
                     }
            [
                parameter = Expression()
                { parameters.add(parameter); }
                (
                    <COMMA>
                    parameter = Expression()
                    { parameters.add(parameter); }
                )*
            ]
            <RPAREN> { Token finalToken = token; }
            { result = factory.createCall(receiver, parameters, finalToken); }

            | <ASSIGN> { SLExpressionNode value = null; }
              value = Expression() {
              if (assignmentName == null) {
                SemErr("invalid assignment target");
              } else if (assignmentReceiver == null) {
                result = factory.createAssignment(assignmentName, value);
              } else {
                result = factory.createWriteProperty(assignmentReceiver, assignmentName, value);
              } }

        | <DOT> { if (receiver == null) {
                    receiver = factory.createRead(assignmentName);
                  } }
          <IDENTIFIER>
          { nestedAssignmentName = factory.createStringLiteral(token, false);
            result = factory.createReadProperty(receiver, nestedAssignmentName); }

        | <LBRACK> { if (receiver == null) {
                        receiver = factory.createRead(assignmentName);
                     } }
          nestedAssignmentName = Expression()
          { result = factory.createReadProperty(receiver, nestedAssignmentName); }
          <RBRACK>
        )
        [
            result = MemberExpression(result, receiver, nestedAssignmentName)
        ]
    } catch ( ParseException e ) {
        SynErr("invalid MemberExpression");
    }
    { return result; }
}
