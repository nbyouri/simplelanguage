/* Parser for the uri language */

options {
    STATIC = false;
    TOKEN_EXTENDS="UToken";
    COMMON_TOKEN_ACTION=true;
}

PARSER_BEGIN(Parser)

package sl.parser;

import java.util.ArrayList;
import java.util.Map;
import java.util.List;

import com.oracle.truffle.api.source.Source;
import sl.SLLanguage;
import sl.nodes.SLExpressionNode;
import sl.nodes.SLRootNode;
import sl.nodes.SLStatementNode;

public class Parser {
    SLNodeFactory factory = null;

    public Map<String, SLRootNode> parseURI(Source source) {
        return parseURI(null, source);
    }

    public Map<String, SLRootNode> parseURI(SLLanguage language, Source source) {
        this.factory = new SLNodeFactory(language, source);
        try {
            this.translationUnit();
        } catch (Exception e) {
            System.out.println("Failed to parse file!");
            e.printStackTrace();
        }
        return this.factory.getAllFunctions();
    }


}

PARSER_END(Parser)

TOKEN_MGR_DECLS:
{
    void CommonTokenAction(Token t)
    {
        UToken token = (UToken) t;
        token.charPos = input_stream.tokenBegin;
        token.val = t.image;
    }
}

/////////////////////////////////////////////////////////
//         The uri lexical grammar starts here         //
/////////////////////////////////////////////////////////


// Whitespace -- ignored
SKIP: {" "|"\t"|"\n"|"\r"|"\f"}

// Single or multi-line comment -- ignored
SKIP: {
      <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

// Reserved words
TOKEN:
{
  < FUNCTION: "function" >
| < RETURN: "return" >
| < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
}

// Operators (these could be combined with the reserved words)
TOKEN:
{
  < ASSIGN: "=" >
| < EQUAL: "==" >
| < NOT_EQUAL: "!=" >
| < GT: ">" >
| < GE: ">=" >
| < LT: "<" >
| < LE: "<=" >
| < STAR: "*" >
| < DIV: "/" >
| < PLUS: "+" >
| < MINUS: "-" >
| < LOR: "||" >
| < LAND: "&&" >
}


// Separators (these could be combined with the reserved words)
TOKEN:
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LCURLY: "{" >
| < RCURLY: "}" >
| < LBRACK: "[" >
| < RBRACK: "]" >
| < SEMI: ";" >
| < COMMA: "," >
| < DOT: "." >
}



// Identifiers
TOKEN:
{
  < IDENTIFIER: (<LETTER>|"_"|"$") (<LETTER>|<DIGIT>|"_"|"$")* >
| < #LETTER: ["a"-"z","A"-"Z"] >
| < #DIGIT: ["0"-"9"] >
| < #NON_ZERO_DIGIT: ["1"-"9"] >
}


// Literals
TOKEN:
{
  < INT_LITERAL: ("0" | <NON_ZERO_DIGIT> (<DIGIT>)*) >
| < STRING_LITERAL: "\"" (<ESC> | ~["\"","\\","\n","\r"])* "\"" >
| < #ESC: "\\" ["n","t","b","r","f","\\","'","\""] >
}

// For anything else, we return an ERROR token. Without this
// definition the TokenManager will throw an Error when a lexical
// error occurs, making it impossible to recover from it. So we
// define this ERROR token.
TOKEN:
{
 < ERROR: ~[] >
}

/////////////////////////////////////////////////////////
//       The uri syntactic grammar starts here         //
/////////////////////////////////////////////////////////


// Parse a compilation unit
//       translationUnit ::= {function}
void translationUnit(): {}
{
    try {
        (
            function()
        )*
    } catch (ParseException e) {
        System.out.println("Failed to parse translationUnit");
        e.printStackTrace();
    }
}


//// Parse a qualified identifier.
////   qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}
//Node qualifiedIdentifier(): {
//    String qualifiedIdentifier = "";
//}
//{
//    try {
//        <IDENTIFIER>
//        {
//            qualifiedIdentifier = token.image;
//        }
//        (
//            <DOT> <IDENTIFIER>
//            { qualifiedIdentifier += "." + token.image; }
//        )*
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse qualifiedIdentifier");
//        e.printStackTrace();
//    }
//    { return new QualifiedIdentifier(qualifiedIdentifier); }
//}


// Parse a function
//      Function ::= FUNCTION IDENTIFIER LPAREN [IDENTIFIER {COMMA IDENTIFIER}] RPAREN block
void function(): {}
{
    try {
            <FUNCTION>
            <IDENTIFIER>    { Token identifierToken = token; }
            <LPAREN>        { int bodyStartPos = token.charPos; }
            [               { factory.startFunction(identifierToken, bodyStartPos); }
                <IDENTIFIER> { factory.addFormalParameter(token); }
                (
                    <COMMA>
                    <IDENTIFIER> { factory.addFormalParameter(token); }
                )*
            ]
            <RPAREN>
    } catch (ParseException e) {
        System.out.println("Failed to parse Function");
        e.printStackTrace();
    }
    { factory.finishFunction(block()); }
}


// Parse a block
//      Block ::= LCURLY {blockStatement} RCURLY
// todo check inloop for break and continue
SLStatementNode block(): {
    SLStatementNode node = null;
    List<SLStatementNode> body = new ArrayList<SLStatementNode>();
    factory.startBlock();
    int start = 0;
}
{
    try {
        <LCURLY> { start = token.charPos; }
        (
            node = statement()
            { body.add(node); }// TODO blockStatement?
        )*
        <RCURLY>
    } catch (ParseException e) {
        System.out.println("Failed to parse block");
        e.printStackTrace();
    }
    { int length = (token.charPos + token.val.length()) - start; }
    { return factory.finishBlock(body, start, length); }
}

//
//// Parse a  blockStatement
////      blockStatement ::= variableDeclarator | statement
//Node blockStatement(): {
//    Node statement = null;
//}
//{
//    try {
//        LOOKAHEAD ( <IDENTIFIER> <ASSIGN> )
//        statement = variableDeclarator()
//        | statement =  statement()
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse blockStatement");
//        e.printStackTrace();
//    }
//    { return statement; }
//}
//
//// Parse a variableDeclarator
////      variableDeclarator ::= IDENTIFIER [ASSIGN expression] SEMI
//Variable variableDeclarator(): {Node expr = null; int line = 0; String name = ""; String value = ""; }
//{
//    try {
//         <IDENTIFIER> { line = token.beginLine; name = token.image; }
//         [
//            <ASSIGN> expr = expression() { value = expr.toString(); }
//         ]
//         <SEMI>
//    } catch ( ParseException e ) {
//        System.out.println("Failed to parse variableDeclarator for variable " + name);
//        e.printStackTrace();
//    }
//    { return new Variable(name, value); }
//}
//
//// Parse arguments.
////      arguments ::= LPAREN [expression {COMMA expression}] RPAREN
//ArrayList<Node> arguments(): {
//    ArrayList<Node> args = new ArrayList<Node>();
//    Node anExpression = null;
//}
//{
//    try {
//        <LPAREN>
//        [
//            anExpression = expression() { args.add( anExpression ); }
//            (
//                <COMMA> anExpression = expression()
//                { args.add( anExpression ); }
//            )*
//        ]
//        <RPAREN>
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse arguments");
//        e.printStackTrace();
//    }
//    { return args; }
//}
//
//// Parse a parenthesized expression.
////   parExpression ::= LPAREN expression RPAREN
//private Node parExpression(): {
//    Node expr = null;
//
//}
//{
//    try {
//        <LPAREN> expr = expression() <RPAREN>
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse parExpression");
//        e.printStackTrace();
//    }
//    { return expr; }
//}
//
//
// Parse a statement
//     statement ::= block
//                | IF parExpression statement [ELSE statement]
//                | WHILE parExpression statement
//                | RETURN [expression] SEMI
//                | SEMI
//                | expression SEMI // TODO validate side effects
SLStatementNode statement(): {
    SLStatementNode stmt = null;
//    Node expr = null;
//    Node cond = null;
//    Node body = null;
//    Node ifel = null;
}
{
    try {
//        stmt = block()
//
//        | <IF> { cond = parExpression(); body = statement();}
//        [ LOOKAHEAD( <ELSE> )
//            <ELSE> ifel = statement()
//        ]
//        { stmt = new If(cond, body, ifel); }
//
//        | <WHILE>
//            cond = parExpression()
//            body = statement()
//        { stmt = new While(cond, body); }
//
        <RETURN>    { Token returnToken = token; SLExpressionNode value = null; }
        [
            value = literal()
        ]
        <SEMI>
        { stmt = factory.createReturn(returnToken, value); }
//
//        | stmt = expression()
//        <SEMI>
    } catch (ParseException e) {
        System.out.println("Failed to parse statement");
        e.printStackTrace();
    }
    { return stmt; }
}
//
//// Parse an expression
////  expression ::= assignmentExpression
//Node expression(): {
//    Node expr = null; String id = null; ArrayList<String> args = null;
//}
//{
//    try {
//        expr = assignmentExpression()
//    } catch ( ParseException e ) {
//        System.out.println("Failed to parse an expression");
//        e.printStackTrace();
//    }
//    { return expr; }
//}
//
//
//// Parse an assignment expression.
////      assignmentExpression ::= conditionalOrExpression  // level 13
////                               [(ASSIGN) assignmentExpression]
//Node assignmentExpression(): {
//    Node lhs = null, rhs = null;
//}
//{
//    try {
//        lhs = conditionalOrExpression()
//        [
//            <ASSIGN>
//            rhs = assignmentExpression()
//            { lhs = new Variable(lhs.toString(), rhs.toString()); }
//        ]
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse assignmentExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//// Parse a conditional-or expression.
////      conditionalOrExpression ::= conditionalAndExpression // level 11
////                                  {LOR conditionalAndExpression}
//Node conditionalOrExpression(): {
//    Node lhs = null, rhs = null;
//}
//{
//    try {
//        lhs = conditionalAndExpression()
//        (
//            <LOR>
//            rhs = conditionalAndExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[LOR]); }
//        )*
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse conditionalOrExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//// Parse a conditional-and expression.
//// conditionalAndExpression ::= inclusiveOrExpression // level 10
////                              {LAND inclusiveOrExpression}
//Node conditionalAndExpression(): {
//    Node lhs = null, rhs = null;
//}
//{
//    try {
//        lhs = equalityExpression()
//        (
//            <LAND>
//            rhs = equalityExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[LAND]); }
//        )*
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse conditionalAndExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//
//// Parse an equality expression.
////  equalityExpression ::= relationalExpression  // level 6
////                          {(EQUAL|NOT_EQUAL) relationalExpression}
//Node equalityExpression(): {
//    Node lhs = null, rhs = null;
//    String op = null;
//}
//{
//    try {
//        lhs = relationalExpression()
//        (
//            <EQUAL>
//            rhs = relationalExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[EQUAL]); } |
//            <NOT_EQUAL>
//            rhs = relationalExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[NOT_EQUAL]); }
//        )*
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse equalityExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//// Parse a relational expression.
////
////   relationalExpression ::= primary  // level 5
////                          [ (GT | LT | GE | LE) primary
//Node relationalExpression(): {
//    Node lhs = null, rhs = null;
//    String op = null;
//}
//{
//    try {
//        lhs = additiveExpression()
//        [
//            <GT>
//            rhs = additiveExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[GT]); } |
//            <LT>
//            rhs = additiveExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[LT]); } |
//            <GE>
//            rhs = additiveExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[GE]); } |
//            <LE>
//            rhs = additiveExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[LE]); }
//        ]
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse relationalExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//// Parse an additive expression.
////      additiveExpression ::= multiplicativeExpression // level 3
////                          {(PLUS|MINUS) multiplicativeExpression}
//Node additiveExpression(): {
//    Node lhs = null, rhs = null;
//}
//{
//    try {
//        lhs = multiplicativeExpression()
//        (
//            <PLUS>
//            rhs = multiplicativeExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[PLUS]); } |
//            <MINUS>
//            rhs = multiplicativeExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[MINUS]); }
//        )*
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse additiveExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//// Parse a multiplicative expression.
////  multiplicativeExpression ::= unaryExpression  // level 2
////                              {(STAR|DIV) unaryExpression}
//Node multiplicativeExpression(): {
//    int line = 0;
//    Node lhs = null, rhs = null;
//}
//{
//    try {
//        lhs = primary()
//        (
//            <STAR>
//            rhs = primary()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[STAR]); } |
//            <DIV>
//            rhs = primary()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[DIV]); }
//        )*
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse multiplicativeExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//
////  Parse an primary
////  primary ::= parExpression
////               | IDENTIFIER [arguments]
////               | IDENTIFIER
////               | literal
////               | qualifiedIdentifier // arguments?
//Node primary(): {
//    String id = null; ArrayList<Node> args = null;
//    Node expr = null, node = null;
//}
//{
//    try {
//        expr = parExpression()
//
//        | LOOKAHEAD( <IDENTIFIER> <DOT> )
//        expr = qualifiedIdentifier()
//        | LOOKAHEAD( <IDENTIFIER> <LPAREN> )
//        <IDENTIFIER> { id = token.image; args = new ArrayList<Node>(); }
//        args = arguments()
//        { expr = new FunctionCall(id, args); }
//        | <IDENTIFIER> { expr = new Expression(token.image); }
//
//        | expr = literal()
//    } catch ( ParseException e ) {
//        System.out.println("Failed to parse an expression");
//        e.printStackTrace();
//    }
//    { return expr; }
//}
//
//
// Parse a literal
//     literal ::= INT_LITERAL
//               | STRING_LITERAL
SLExpressionNode literal(): {SLExpressionNode result = null;}
{
    try {
        <INT_LITERAL>
        { result = factory.createNumericLiteral(token); }
        | <STRING_LITERAL>
        { result = factory.createStringLiteral(token, true); }
    } catch (ParseException e) {
        System.out.println("Failed to parse literal");
        e.printStackTrace();
    }
    { return result; }
}
