/* Generated By:JavaCC: Do not edit this line. Parser.java */
package sl.parser;

import java.util.ArrayList;
import java.util.Map;
import java.util.List;

import com.oracle.truffle.api.source.Source;
import sl.SLLanguage;
import sl.nodes.SLExpressionNode;
import sl.nodes.SLRootNode;
import sl.nodes.SLStatementNode;

public class Parser implements ParserConstants {
    SLNodeFactory factory = null;

    public Map<String, SLRootNode> parseURI(Source source) {
        return parseURI(null, source);
    }

    public Map<String, SLRootNode> parseURI(SLLanguage language, Source source) {
        this.factory = new SLNodeFactory(language, source);
        try {
            this.translationUnit();
        } catch (Exception e) {
            System.out.println("Failed to parse file!");
            e.printStackTrace();
        }
        return this.factory.getAllFunctions();
    }

/////////////////////////////////////////////////////////
//       The uri syntactic grammar starts here         //
/////////////////////////////////////////////////////////


// Parse a compilation unit
//       translationUnit ::= {function}
  final public void translationUnit() throws ParseException {
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        function();
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse translationUnit");
        e.printStackTrace();
    }
  }

//// Parse a qualified identifier.
////   qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}
//Node qualifiedIdentifier(): {
//    String qualifiedIdentifier = "";
//}
//{
//    try {
//        <IDENTIFIER>
//        {
//            qualifiedIdentifier = token.image;
//        }
//        (
//            <DOT> <IDENTIFIER>
//            { qualifiedIdentifier += "." + token.image; }
//        )*
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse qualifiedIdentifier");
//        e.printStackTrace();
//    }
//    { return new QualifiedIdentifier(qualifiedIdentifier); }
//}


// Parse a function
//      Function ::= FUNCTION IDENTIFIER LPAREN [IDENTIFIER {COMMA IDENTIFIER}] RPAREN block
  final public void function() throws ParseException {
    try {
      jj_consume_token(FUNCTION);
      jj_consume_token(IDENTIFIER);
                              Token identifierToken = token;
      jj_consume_token(LPAREN);
                              int bodyStartPos = token.charPos;
                              factory.startFunction(identifierToken, bodyStartPos);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
                               factory.addFormalParameter(token);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          jj_consume_token(IDENTIFIER);
                                   factory.addFormalParameter(token);
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        System.out.println("Failed to parse Function");
        e.printStackTrace();
    }
      factory.finishFunction(block());
  }

// Parse a block
//      Block ::= LCURLY {blockStatement} RCURLY
// todo check inloop for break and continue
  final public SLStatementNode block() throws ParseException {
    SLStatementNode node = null;
    List<SLStatementNode> body = new ArrayList<SLStatementNode>();
    factory.startBlock();
    int start = 0;
    try {
      jj_consume_token(LCURLY);
                   start = token.charPos;
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        node = statement();
              body.add(node);
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        System.out.println("Failed to parse block");
        e.printStackTrace();
    }
      int length = (token.charPos + token.val.length()) - start;
      {if (true) return factory.finishBlock(body, start, length);}
    throw new Error("Missing return statement in function");
  }

//
//// Parse a  blockStatement
////      blockStatement ::= variableDeclarator | statement
//Node blockStatement(): {
//    Node statement = null;
//}
//{
//    try {
//        LOOKAHEAD ( <IDENTIFIER> <ASSIGN> )
//        statement = variableDeclarator()
//        | statement =  statement()
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse blockStatement");
//        e.printStackTrace();
//    }
//    { return statement; }
//}
//
//// Parse a variableDeclarator
////      variableDeclarator ::= IDENTIFIER [ASSIGN expression] SEMI
//Variable variableDeclarator(): {Node expr = null; int line = 0; String name = ""; String value = ""; }
//{
//    try {
//         <IDENTIFIER> { line = token.beginLine; name = token.image; }
//         [
//            <ASSIGN> expr = expression() { value = expr.toString(); }
//         ]
//         <SEMI>
//    } catch ( ParseException e ) {
//        System.out.println("Failed to parse variableDeclarator for variable " + name);
//        e.printStackTrace();
//    }
//    { return new Variable(name, value); }
//}
//
//// Parse arguments.
////      arguments ::= LPAREN [expression {COMMA expression}] RPAREN
//ArrayList<Node> arguments(): {
//    ArrayList<Node> args = new ArrayList<Node>();
//    Node anExpression = null;
//}
//{
//    try {
//        <LPAREN>
//        [
//            anExpression = expression() { args.add( anExpression ); }
//            (
//                <COMMA> anExpression = expression()
//                { args.add( anExpression ); }
//            )*
//        ]
//        <RPAREN>
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse arguments");
//        e.printStackTrace();
//    }
//    { return args; }
//}
//
//// Parse a parenthesized expression.
////   parExpression ::= LPAREN expression RPAREN
//private Node parExpression(): {
//    Node expr = null;
//
//}
//{
//    try {
//        <LPAREN> expr = expression() <RPAREN>
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse parExpression");
//        e.printStackTrace();
//    }
//    { return expr; }
//}
//
//
// Parse a statement
//     statement ::= block
//                | IF parExpression statement [ELSE statement]
//                | WHILE parExpression statement
//                | RETURN [expression] SEMI
//                | SEMI
//                | expression SEMI // TODO validate side effects
  final public SLStatementNode statement() throws ParseException {
    SLStatementNode stmt = null;
    try {
      jj_consume_token(RETURN);
                      Token returnToken = token; SLExpressionNode value = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_LITERAL:
      case STRING_LITERAL:
        value = literal();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(SEMI);
          stmt = factory.createReturn(returnToken, value);
    } catch (ParseException e) {
        System.out.println("Failed to parse statement");
        e.printStackTrace();
    }
      {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

//
//// Parse an expression
////  expression ::= assignmentExpression
//Node expression(): {
//    Node expr = null; String id = null; ArrayList<String> args = null;
//}
//{
//    try {
//        expr = assignmentExpression()
//    } catch ( ParseException e ) {
//        System.out.println("Failed to parse an expression");
//        e.printStackTrace();
//    }
//    { return expr; }
//}
//
//
//// Parse an assignment expression.
////      assignmentExpression ::= conditionalOrExpression  // level 13
////                               [(ASSIGN) assignmentExpression]
//Node assignmentExpression(): {
//    Node lhs = null, rhs = null;
//}
//{
//    try {
//        lhs = conditionalOrExpression()
//        [
//            <ASSIGN>
//            rhs = assignmentExpression()
//            { lhs = new Variable(lhs.toString(), rhs.toString()); }
//        ]
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse assignmentExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//// Parse a conditional-or expression.
////      conditionalOrExpression ::= conditionalAndExpression // level 11
////                                  {LOR conditionalAndExpression}
//Node conditionalOrExpression(): {
//    Node lhs = null, rhs = null;
//}
//{
//    try {
//        lhs = conditionalAndExpression()
//        (
//            <LOR>
//            rhs = conditionalAndExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[LOR]); }
//        )*
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse conditionalOrExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//// Parse a conditional-and expression.
//// conditionalAndExpression ::= inclusiveOrExpression // level 10
////                              {LAND inclusiveOrExpression}
//Node conditionalAndExpression(): {
//    Node lhs = null, rhs = null;
//}
//{
//    try {
//        lhs = equalityExpression()
//        (
//            <LAND>
//            rhs = equalityExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[LAND]); }
//        )*
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse conditionalAndExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//
//// Parse an equality expression.
////  equalityExpression ::= relationalExpression  // level 6
////                          {(EQUAL|NOT_EQUAL) relationalExpression}
//Node equalityExpression(): {
//    Node lhs = null, rhs = null;
//    String op = null;
//}
//{
//    try {
//        lhs = relationalExpression()
//        (
//            <EQUAL>
//            rhs = relationalExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[EQUAL]); } |
//            <NOT_EQUAL>
//            rhs = relationalExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[NOT_EQUAL]); }
//        )*
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse equalityExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//// Parse a relational expression.
////
////   relationalExpression ::= primary  // level 5
////                          [ (GT | LT | GE | LE) primary
//Node relationalExpression(): {
//    Node lhs = null, rhs = null;
//    String op = null;
//}
//{
//    try {
//        lhs = additiveExpression()
//        [
//            <GT>
//            rhs = additiveExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[GT]); } |
//            <LT>
//            rhs = additiveExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[LT]); } |
//            <GE>
//            rhs = additiveExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[GE]); } |
//            <LE>
//            rhs = additiveExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[LE]); }
//        ]
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse relationalExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//// Parse an additive expression.
////      additiveExpression ::= multiplicativeExpression // level 3
////                          {(PLUS|MINUS) multiplicativeExpression}
//Node additiveExpression(): {
//    Node lhs = null, rhs = null;
//}
//{
//    try {
//        lhs = multiplicativeExpression()
//        (
//            <PLUS>
//            rhs = multiplicativeExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[PLUS]); } |
//            <MINUS>
//            rhs = multiplicativeExpression()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[MINUS]); }
//        )*
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse additiveExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//// Parse a multiplicative expression.
////  multiplicativeExpression ::= unaryExpression  // level 2
////                              {(STAR|DIV) unaryExpression}
//Node multiplicativeExpression(): {
//    int line = 0;
//    Node lhs = null, rhs = null;
//}
//{
//    try {
//        lhs = primary()
//        (
//            <STAR>
//            rhs = primary()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[STAR]); } |
//            <DIV>
//            rhs = primary()
//            { lhs = new BinaryExpression(lhs, rhs, tokenImage[DIV]); }
//        )*
//    }
//    catch ( ParseException e ) {
//        System.out.println("Failed to parse multiplicativeExpression");
//        e.printStackTrace();
//    }
//    { return lhs; }
//}
//
//
////  Parse an primary
////  primary ::= parExpression
////               | IDENTIFIER [arguments]
////               | IDENTIFIER
////               | literal
////               | qualifiedIdentifier // arguments?
//Node primary(): {
//    String id = null; ArrayList<Node> args = null;
//    Node expr = null, node = null;
//}
//{
//    try {
//        expr = parExpression()
//
//        | LOOKAHEAD( <IDENTIFIER> <DOT> )
//        expr = qualifiedIdentifier()
//        | LOOKAHEAD( <IDENTIFIER> <LPAREN> )
//        <IDENTIFIER> { id = token.image; args = new ArrayList<Node>(); }
//        args = arguments()
//        { expr = new FunctionCall(id, args); }
//        | <IDENTIFIER> { expr = new Expression(token.image); }
//
//        | expr = literal()
//    } catch ( ParseException e ) {
//        System.out.println("Failed to parse an expression");
//        e.printStackTrace();
//    }
//    { return expr; }
//}
//
//
// Parse a literal
//     literal ::= INT_LITERAL
//               | STRING_LITERAL
  final public SLExpressionNode literal() throws ParseException {
                             SLExpressionNode result = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_LITERAL:
        jj_consume_token(INT_LITERAL);
          result = factory.createNumericLiteral(token);
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
          result = factory.createStringLiteral(token, true);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse literal");
        e.printStackTrace();
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x0,0x0,0x200,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2,0x8,0x0,0x180,0x180,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
